name: build LDDC

on:
    push:
        branches: main
        paths:
            - "**.py"
            - ".github/workflows/build-nuitka.yml"
    workflow_dispatch:
        


jobs:

    build:
        strategy:
            fail-fast: false
            matrix:
                os: [macos-latest]
                arch: [arm64]

        runs-on: ${{ matrix.os }}
        
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-python@v5
              with:
                python-version: 3.12
                architecture: ${{ matrix.arch }}

            - name: Get arch
              id: arch
              shell: bash
              run: |
                if [[ ${{ matrix.arch }} == 'x64' ]]; then
                  echo "arch=amd64" >> $GITHUB_OUTPUT
                  echo "nuitka_arch=x86_64" >> $GITHUB_OUTPUT
                elif [[ ${{ matrix.arch }} == 'arm64' ]]; then
                  echo "arch=arm64" >> $GITHUB_OUTPUT
                  echo "nuitka_arch=arm64" >> $GITHUB_OUTPUT
                fi
            
            - name: Install dependencies
              run: |
                pip install -r requirements.txt
                pip install imageio

            - name: Install create-dmg/upx
              if: ${{ runner.os == 'macOS' }}
              run: |
                brew install create-dmg

            # Remove problematic brew libs if Intel Mac https://github.com/Nuitka/Nuitka/issues/2853#issuecomment-2119520735
            - name: Remove problematic brew libs
              run: |
                brew remove --force --ignore-dependencies openssl@3
                brew cleanup openssl@3
              if: runner.os == 'macOS' && runner.arch == 'X64'

            - name: mkdir
              run: |
                mkdir -p dist
                mkdir -p upload
            
            - name: Get Information
              id: info
              shell: bash
              run: |
                echo "copyright=Copyright (C) $(python build_helper.py --task get_year)" >> $GITHUB_OUTPUT
                echo "version=$(python build_helper.py --task get_version)" >> $GITHUB_OUTPUT
                cat $GITHUB_OUTPUT

            - name: Build Executable(macOS)
              uses: Nuitka/Nuitka-Action@main
              if : ${{ runner.os == 'macOS' }}
              with:
                nuitka-version: main
                script-name: LDDC.py
                standalone: true
                onefile: false
                report: nuitka-report.xml
                enable-plugins: pyside6
                product-name: "LDDC"
                file-version: ${{ steps.info.outputs.version }}
                product-version: ${{ steps.info.outputs.version }}
                copyright: ${{ steps.info.outputs.copyright }}

                disable-console: true

                macos-app-icon: "res/img/icon/logo.png"
                macos-app-version: ${{ steps.info.outputs.version }}
                macos-create-app-bundle: true
                macos-target-arch: ${{ steps.arch.outputs.nuitka_arch }}

            - name: Upload report
              uses: actions/upload-artifact@v4
              if: success() || failure()
              with:
                name: ${{ runner.os }} - ${{ matrix.arch }} report
                path: |
                  nuitka-crash-report.xml
                  nuitka-report.xml

            - name: create dmg
              if: ${{ runner.os == 'macOS' }}
              run: |
                create-dmg \
                  --volname "LDDC" \
                  --volicon "res/img/icon/logo.icns" \
                  --window-pos 200 120 \
                  --window-size 800 400 \
                  --icon-size 100 \
                  --icon "LDDC.app" 200 190 \
                  --app-drop-link  600 185 \
                  dist/LDDC.dmg \
                  build/LDDC.app

                mv dist/LDDC.dmg upload/LDDC-${{ steps.info.outputs.version }}-${{ steps.arch.outputs.arch }}.dmg

            - name: Upload dist
              if: success() || failure()
              uses: actions/upload-artifact@v4
              with:
                name: ${{ runner.os }} - ${{ matrix.arch }} Build
                path: |
                    dist/
                    build/

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                name: ${{ runner.os }} - ${{ matrix.arch }} artifacts
                path: |
                    upload/
